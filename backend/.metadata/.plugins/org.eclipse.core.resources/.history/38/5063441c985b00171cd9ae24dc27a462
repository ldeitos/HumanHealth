package br.com.humanhealth.persistence.interceptor;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.interceptor.Interceptor;
import javax.interceptor.InvocationContext;

import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.TxnType;

import br.com.humanhealth.persistence.TransactionType;
import br.com.humanhealth.persistence.Transactional;

@Interceptor
@Transactional
public class TransactionalInterceptor {
    
    public static final Map<TransactionType, TxnType> txType = new HashMap<>();
    
    @PostConstruct
    public void init(){
	txType.put(TransactionType.MANDATORY, TxnType.MANDATORY);
	txType.put(TransactionType.NEVER, TxnType.NEVER);
	txType.put(TransactionType.NOT_SUPPORTED, TxnType.NOT_SUPPORTED);
	txType.put(TransactionType.REQUIRED, TxnType.REQUIRED);
	txType.put(TransactionType.REQUIRES_NEW, TxnType.REQUIRES_NEW);
	txType.put(TransactionType.SUPPORTS, TxnType.SUPPORTS);
    }

    public Object doTransact(final InvocationContext ic) throws Exception {
	final Object toReturn;
	final TxnType type = null;
	
	ObjectifyService.ofy().execute(txType.get(type), new Work<Object>() {
	    @Override
	    public void run() {
		return ic.proceed();		
	    }
	});
	
	return toReturn;
    }
}
